// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? // <-- DODAJ
  image         String?   // <-- DODAJ
  passwordHash  String?   // <-- ZMIEÅƒ NA OPCJONALNY
  role          Role      @default(CLIENT)
  organization  String?
  createdAt     DateTime  @default(now())

  // Relacje
  audits        Audit[]   @relation("ClientAudits")
  createdAudits Audit[]   @relation("CreatedByAudits")
  accounts      Account[] // <-- DODAJ
  sessions      Session[] // <-- DODAJ
}

model Audit {
  id           String    @id @default(cuid())
  title        String
  clientId     String
  createdById  String
  status       AuditStatus
  createdAt    DateTime  @default(now())
  url          String?   @unique

  client       User      @relation("ClientAudits", fields: [clientId], references: [id])
  createdBy    User      @relation("CreatedByAudits", fields: [createdById], references: [id])

  reports      Report[] 
  errors       Error[]
  files        File[]
}

model Report {
  id          String   @id @default(cuid())
  auditId     String
  title       String
  description String?
  version     String   
  createdAt   DateTime @default(now())
  fileUrl     String 

  audit       Audit    @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

model Error {
  id               String        @id @default(cuid())
  auditId          String
  title            String
  description      String
  category         ErrorCategory
  severity         ErrorSeverity
  recommendationAI String?
  isResolved       Boolean       @default(false)

  audit            Audit         @relation(fields: [auditId], references: [id])
}

model File {
  id        String    @id @default(cuid())
  auditId   String
  filename  String
  url       String
  type      String

  audit     Audit  @relation(fields: [auditId], references: [id], onDelete: Cascade)
}

enum Role {
  ADMIN
  CLIENT
}

enum AuditStatus {
  DRAFT
  SENT
  COMPLETED
  ARCHIVED
}

enum ErrorCategory {
  KONTRAST
  TEKST
  STRUKTURA
  OBRAZY
  MULTIMEDIA
  FORMULARZE
  INNE
}

enum ErrorSeverity {
  LOW
  MEDIUM
  HIGH
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}